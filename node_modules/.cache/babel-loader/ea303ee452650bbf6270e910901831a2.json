{"ast":null,"code":"var _jsxFileName = \"/Users/lea/Document/02_Projects/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\n// Use a hook\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask'; // All events are stored in here... global!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // state is immutable, \n  // you have to recreate and send again, so no push()!\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: 'Watching a movie with Chan',\n    day: 'Jan 21th 2022 at 8pm',\n    reminder: 'false'\n  }, {\n    id: 2,\n    text: 'Sending package to Germany',\n    day: 'Aug 18th 2022 at 10am',\n    reminder: 'true'\n  }, {\n    id: 3,\n    text: 'Having lunch with Nathalie',\n    day: 'Aug 17th 2021 at 1pm',\n    reminder: 'false'\n  }]); // Add task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; // delete task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // toggle reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this) : 'There are no tasks for now!']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SxMpTSlKaVRjfTJVP4fGthxNR1c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lea/Document/02_Projects/react-task-tracker/src/App.js"],"names":["useState","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","id","text","day","reminder","addTask","task","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","length"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAGA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CACjC;AACIS,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,4BAFV;AAGIC,IAAAA,GAAG,EAAE,sBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GADiC,EAOjC;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,4BAFV;AAGIC,IAAAA,GAAG,EAAE,uBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GAPiC,EAajC;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,4BAFV;AAGIC,IAAAA,GAAG,EAAE,sBAHT;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GAbiC,CAAD,CAAlC,CAJW,CAyBZ;;AACA,QAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAML,EAAE,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAmC,CAA9C;AACA,UAAMC,OAAO,GAAG;AAACT,MAAAA,EAAD;AAAK,SAAGK;AAAR,KAAhB;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWW,OAAX,CAAD,CAAR;AAED,GALD,CA1BY,CAiCZ;;;AACA,QAAMC,UAAU,GAAIV,EAAD,IAAQ;AACzBD,IAAAA,QAAQ,CAACD,KAAK,CAACa,MAAN,CAAcN,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CAlCY,CAsCZ;;;AACA,QAAMY,cAAc,GAAIZ,EAAD,IAAQ;AAC7BD,IAAAA,QAAQ,CAACD,KAAK,CAACe,GAAN,CAAWR,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGK,IAAJ;AAAUF,MAAAA,QAAQ,EAAGE,IAAI,CAACF;AAA1B,KAAjB,GAAuDE,IAA3E,CAAD,CAAR;AACD,GAFD;;AAID,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MACfR,cAAc,CAAE,CAACD,WAAH,CADd;AAEA,MAAA,OAAO,EAAEA;AAFT;AAAA;AAAA;AAAA;AAAA,YADF,EAMGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEQ;AAAhB;AAAA;AAAA;AAAA;AAAA,YANlB,EAOGN,KAAK,CAACgB,MAAN,GAAe,CAAf,gBACD,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEhB,KAAd;AACA,MAAA,QAAQ,EAAEY,UADV;AAEA,MAAA,QAAQ,EAAEE;AAFV;AAAA;AAAA;AAAA;AAAA,YADC,GAKC,6BAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA5DQjB,G;;KAAAA,G;AA8DT,eAAeA,GAAf","sourcesContent":["// Use a hook\nimport { useState } from 'react'\n\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\n\n// All events are stored in here... global!\n\nfunction App() {\n    // state is immutable, \n    // you have to recreate and send again, so no push()!\n    const [showAddTask, setShowAddTask] = useState(false);\n    const [tasks, setTasks] = useState([\n      {\n          id: 1,\n          text: 'Watching a movie with Chan',\n          day: 'Jan 21th 2022 at 8pm',\n          reminder: 'false'\n      },\n      {\n          id: 2,\n          text: 'Sending package to Germany',\n          day: 'Aug 18th 2022 at 10am',\n          reminder: 'true'\n      },\n      {\n          id: 3,\n          text: 'Having lunch with Nathalie',\n          day: 'Aug 17th 2021 at 1pm',\n          reminder: 'false'\n      },\n   ]) \n\n   // Add task\n   const addTask = (task) => {\n     const id = Math.floor(Math.random() * 10000) +1\n     const newTask = {id, ...task}\n     setTasks([...tasks, newTask])\n\n   }\n\n   // delete task\n   const deleteTask = (id) => {\n     setTasks(tasks.filter((task) => task.id !== id))\n   }\n\n   // toggle reminder\n   const toggleReminder = (id) => {\n     setTasks(tasks.map((task) => task.id === id ? {...task, reminder : task.reminder} : task))\n   }\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => \n      setShowAddTask (!showAddTask)}\n      showAdd={showAddTask}\n      />\n\n      {showAddTask && <AddTask onAdd={addTask}/>}\n      {tasks.length > 0 ? (\n      <Tasks tasks={tasks} \n      onDelete={deleteTask}\n      onToggle={toggleReminder}/> \n      ) : (\n        'There are no tasks for now!'\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}